--- sources/bogo.move
+++ sources/bogo.move
@@ -25 +25 @@
-    struct BogoApp has drop {}
+    public struct BogoApp has drop {}
@@ -29 +29 @@
-    struct UsedInDayOnePromo has copy, store, drop { }
+    public struct UsedInDayOnePromo has copy, store, drop { }
@@ -84 +84 @@
-        let nft = registry::add_record(registry, new_domain, DEFAULT_DURATION, clock, ctx);
+        let mut nft = registry::add_record(registry, new_domain, DEFAULT_DURATION, clock, ctx);
--- sources/day_one.move
+++ sources/day_one.move
@@ -20 +20 @@
-    friend day_one::bogo;
+    /* friend day_one::bogo; */
@@ -23 +23 @@
-    struct DropList has key { 
+    public struct DropList has key { 
@@ -30 +30 @@
-    struct SetupCap has key { id: UID }
+    public struct SetupCap has key { id: UID }
@@ -40 +40 @@
-    struct DAY_ONE has drop {}
+    public struct DAY_ONE has drop {}
@@ -55 +55 @@
-    struct DayOne has key, store { 
+    public struct DayOne has key, store { 
@@ -66 +66 @@
-        recipients: vector<address>,
+        mut recipients: vector<address>,
@@ -77 +77 @@
-        let i: u32 = self.total_minted;
+        let mut i: u32 = self.total_minted;
@@ -99 +99 @@
-        hashes: vector<address>,
+        mut hashes: vector<address>,
@@ -117 +117 @@
-    public(friend) fun activate(self: &mut DayOne) {
+    public(package) fun activate(self: &mut DayOne) {
--- tests/day_one_tests.move
+++ tests/day_one_tests.move
@@ -22 +22 @@
-        let scenario_val = test_scenario::begin(SUINS_ADDRESS);
+        let mut scenario_val = test_scenario::begin(SUINS_ADDRESS);
@@ -25 +25 @@
-            let suins = suins::init_for_testing(ctx(scenario));
+            let mut suins = suins::init_for_testing(ctx(scenario));
@@ -34 +34 @@
-            let suins = test_scenario::take_shared<SuiNS>(scenario);
+            let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -47 +47 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -51,2 +51,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (mut domain1, mut domain2, mut domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -77 +77 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -81,2 +81,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (mut domain1, domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -99 +99 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -103,2 +103,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (mut domain1, domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -106 +106 @@
-        let new_name_1 = bogo::claim(&mut day_one, &mut suins, &mut domain1, utf8(b"wow.sui"), &clock, ctx(scenario));
+        let mut new_name_1 = bogo::claim(&mut day_one, &mut suins, &mut domain1, utf8(b"wow.sui"), &clock, ctx(scenario));
@@ -124 +124 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -128,2 +128,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (mut domain1, domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -146 +146 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -149,3 +149,3 @@
-        let clock = test_scenario::take_shared<Clock>(scenario);
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);    
+        let mut clock = test_scenario::take_shared<Clock>(scenario);
+        let (domain1, domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);    
@@ -156 +156 @@
-        let fresh_domain = new_domain(utf8(b"exp.sui"), 1, &clock, ctx(scenario));
+        let mut fresh_domain = new_domain(utf8(b"exp.sui"), 1, &clock, ctx(scenario));
@@ -174 +174 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -178,2 +178,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (domain1, mut domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -197 +197 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -201,2 +201,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (domain1, domain2, mut domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -220 +220 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -224,2 +224,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (mut domain1, domain2, domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
@@ -242 +242 @@
-        let scenario_val = test_init();
+        let mut scenario_val = test_init();
@@ -246,2 +246,2 @@
-        let (domain1, domain2, domain3, day_one) = prepare(ctx(scenario), &clock);
-        let suins = test_scenario::take_shared<SuiNS>(scenario);
+        let (domain1, domain2, mut domain3, mut day_one) = prepare(ctx(scenario), &clock);
+        let mut suins = test_scenario::take_shared<SuiNS>(scenario);
